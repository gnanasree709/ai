from collections import deque

# Define the Water Jug Problem
class WaterJugProblem:
    def __init__(self, jug1_capacity, jug2_capacity, target):
        self.jug1_capacity = jug1_capacity  # Capacity of Jug 1
        self.jug2_capacity = jug2_capacity  # Capacity of Jug 2
        self.target = target  # Target amount of water to measure

    def is_goal_state(self, state):
        # Goal state is when either of the jugs contains the target amount of water
        return state[0] == self.target or state[1] == self.target

    def bfs(self):
        # Initial state where both jugs are empty
        initial_state = (0, 0)
        # Queue for BFS: (state, list of actions taken to reach that state)
        queue = deque([(initial_state, [])])
        visited = set()  # Set to store visited states to avoid revisiting

        while queue:
            state, actions = queue.popleft()

            if state in visited:
                continue
            visited.add(state)

            # Check if goal state is reached
            if self.is_goal_state(state):
                return actions

            # Possible actions
            jug1, jug2 = state
            # 1. Fill Jug 1
            if jug1 < self.jug1_capacity:
                new_state = (self.jug1_capacity, jug2)
                queue.append((new_state, actions + ['Fill Jug 1']))
            # 2. Fill Jug 2
            if jug2 < self.jug2_capacity:
                new_state = (jug1, self.jug2_capacity)
                queue.append((new_state, actions + ['Fill Jug 2']))
            # 3. Empty Jug 1
            if jug1 > 0:
                new_state = (0, jug2)
                queue.append((new_state, actions + ['Empty Jug 1']))
            # 4. Empty Jug 2
            if jug2 > 0:
                new_state = (jug1, 0)
                queue.append((new_state, actions + ['Empty Jug 2']))
            # 5. Pour water from Jug 1 to Jug 2
            if jug1 > 0 and jug2 < self.jug2_capacity:
                pour = min(jug1, self.jug2_capacity - jug2)
                new_state = (jug1 - pour, jug2 + pour)
                queue.append((new_state, actions + ['Pour Jug 1 -> Jug 2']))
            # 6. Pour water from Jug 2 to Jug 1
            if jug2 > 0 and jug1 < self.jug1_capacity:
                pour = min(jug2, self.jug1_capacity - jug1)
                new_state = (jug1 + pour, jug2 - pour)
                queue.append((new_state, actions + ['Pour Jug 2 -> Jug 1']))

        return None  # Return None if no solution is found

# Create the problem instance
jug1_capacity = 4  # Capacity of Jug 1
jug2_capacity = 3  # Capacity of Jug 2
target = 2 

problem = WaterJugProblem(jug1_capacity, jug2_capacity, target)
solution = problem.bfs()
if solution:
    print("Solution found:")
    for step in solution:
        print(step)
else:
    print("No solution found.")
