from collections import deque

def bfs(graph, start):
    visited = set()   
    queue = deque([start]) 
    visited.add(start)
    
    while queue:
        node = queue.popleft() 
        print(node, end=" ")  
        for neighbor in graph[node]: 
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)

def dfs(graph, node, visited=None):
    if visited is None:
        visited = set() 
    visited.add(node)
    print(node, end=" ") 
    
    for neighbor in graph[node]:
        if neighbor not in visited:
            dfs(graph, neighbor, visited)
            
graph = {
    0: [1, 2],
    1: [0, 3, 4],
    2: [0, 5],
    3: [1],
    4: [1],
    5: [2]
}

print("BFS Traversal:")
bfs(graph, 0)  

print("\nDFS Traversal:")

dfs(graph, 0)
